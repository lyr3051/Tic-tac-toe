{"version":3,"sources":["logo.svg","Square.js","Boarder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","this","value","React","Component","calculateWinner","squares","lines","i","length","a","b","c","Boarder","gameStart","state","gamestart","peace","Array","fill","turn","num","newarray","slice","setState","myhandle","status","winner","document","getElementsByClassName","mysquare","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52535c84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Square.css';\r\nclass Square extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            \r\n                <button className='square' onClick={()=>{this.props.onClick()}}>\r\n                    {this.props.value}\r\n                </button>\r\n                \r\n                \r\n        )\r\n\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport './Boarder.css';\r\nimport Square from './Square.js'\r\n\r\n\r\nfunction calculateWinner(squares){\r\n    \r\n    const lines=[\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6],\r\n\r\n\r\n    ];\r\n    for(let i=0;i<lines.length;i++){\r\n        const[a,b,c]=lines[i];\r\n        if(squares[a]&& squares[a]===squares[b]&&squares[a]===squares[c]){\r\n            \r\n            return squares[a];\r\n            \r\n        }\r\n     \r\n    }\r\n    return null;\r\n}\r\n\r\nfunction  Clear() {\r\n  this.setState({\r\n        squares:Array(9).fill(null)\r\n  })\r\n}\r\n\r\n\r\n\r\nclass Boarder extends React.Component{\r\n    \r\n    \r\n    \r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            squares:Array(9).fill(null),\r\n            turn: true,\r\n            gamestart:true,\r\n            peace: false,\r\n            num:0\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    myhandle(i){\r\n        const newarray=this.state.squares.slice();\r\n        \r\n        if (calculateWinner(newarray) ) {\r\n            \r\n            return;\r\n          }\r\n        else if(newarray[i]){\r\n            \r\n           return;\r\n            \r\n             \r\n        }\r\n        newarray[i]=this.state.turn? 'X':'O';\r\n        this.setState({\r\n            squares:newarray,\r\n            turn:!this.state.turn,\r\n            \r\n        });\r\n        this.state.num++;\r\n    }\r\n    mysquare(i){\r\n        return(\r\n            <Square value={this.state.squares[i]} onClick={()=>this.myhandle(i)}></Square>\r\n            \r\n                 \r\n        )\r\n    }\r\n\r\n    gameStart= ()=> {\r\n        // this.setState({gamestart:!this.state.gamestart});\r\n        this.state.gamestart=!this.state.gamestart;\r\n        this.state.peace='false';\r\n      }\r\n\r\n     \r\n     \r\n\r\n    render(){\r\n        \r\n        const winner=calculateWinner(this.state.squares);\r\n        var elems = document.getElementsByClassName('start_background');\r\n\r\n        \r\n        \r\n        let status;\r\n        if(winner){\r\n            \r\n            status='Winner:    '+winner; \r\n            this.state.gamestart='true';\r\n            this.state.num=0;\r\n            \r\n           \r\n        }\r\n        else if(this.state.num<9){\r\n            status='Next player : '+(this.state.turn?'X':'O');\r\n            \r\n           \r\n        }   \r\n        else {\r\n\r\n            status='A Draw'; \r\n            this.state.gamestart='true';\r\n            this.state.num=0;\r\n            \r\n            \r\n        }\r\n          \r\n        \r\n               \r\n             \r\n\r\n        return(\r\n            \r\n            <div className='boarder'>\r\n            \r\n            <div className=\"status\">{status}</div>\r\n            <div className='row'>   \r\n                {this.mysquare(0)}\r\n                {this.mysquare(1)}\r\n                {this.mysquare(2)}\r\n            </div> \r\n\r\n            <div className='row'>\r\n                {this.mysquare(3)}\r\n                {this.mysquare(4)}\r\n                {this.mysquare(5)}\r\n            </div>\r\n\r\n            <div className='row'>\r\n                {this.mysquare(6)}\r\n                {this.mysquare(7)}\r\n                {this.mysquare(8)}\r\n            </div>\r\n            <div className='background'></div>  \r\n            \r\n            \r\n               {\r\n                   this.state.gamestart &&//控制起始畫面\r\n                <div  className='start_background'>\r\n                <button  className=\"start\" \r\n                onClick={() => {\r\n                    \r\n                    this.gameStart();\r\n                    this.setState({squares:Array(9).fill(null)}); // 清空\r\n    \r\n                                }} >Start</button>\r\n              \r\n               </div>\r\n\r\n                }           \r\n       \r\n            </div>\r\n        )\r\n                    \r\n    }\r\n}\r\n\r\n\r\nexport default Boarder;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Boarder from './Boarder.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Boarder></Boarder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}